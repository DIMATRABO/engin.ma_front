"use client"

import React from 'react'
import {useLocale, useTranslations} from 'next-intl'
import {Link, usePathname, useRouter} from '@/i18n/navigation'
import LanguageSwitcher from '@/components/common/LanguageSwitcher'

function cx(...classes: Array<string | false | null | undefined>) {
    return classes.filter(Boolean).join(' ')
}

type NavKey = 'dashboard' | 'users' | 'equipments' | 'brands' | 'cities' | 'categories' | 'models' | 'bookings' | 'reviews'
const navItems: Array<{ href: () => string; labelKey: NavKey; match: (p: string) => boolean }> = [
    {
        href: () => `/admin`,
        labelKey: 'dashboard',
        match: (p: string) => p === `/admin` || p === `/admin/`
    },
    {
        href: () => `/admin/users`,
        labelKey: 'users',
        match: (p: string) => p.startsWith(`/admin/users`)
    },
    {
        href: () => `/admin/equipments`,
        labelKey: 'equipments',
        match: (p: string) => p.startsWith(`/admin/equipments`)
    },
    {
        href: () => `/admin/brands`,
        labelKey: 'brands',
        match: (p: string) => p.startsWith(`/admin/brands`)
    },
    {
        href: () => `/admin/cities`,
        labelKey: 'cities',
        match: (p: string) => p.startsWith(`/admin/cities`)
    },
    {
        href: () => `/admin/categories`,
        labelKey: 'categories',
        match: (p: string) => p.startsWith(`/admin/categories`)
    },
    {
        href: () => `/admin/models`,
        labelKey: 'models',
        match: (p: string) => p.startsWith(`/admin/models`)
    },
    {
        href: () => `/admin/bookings`,
        labelKey: 'bookings',
        match: (p: string) => p.startsWith(`/admin/bookings`)
    },
    {
        href: () => `/admin/reviews`,
        labelKey: 'reviews',
        match: (p: string) => p.startsWith(`/admin/reviews`)
    },
]

export default function AdminLayout({children}: { children: React.ReactNode }) {
    const locale = useLocale()
    const tNav = useTranslations('admin.nav')
    const tTopbar = useTranslations('admin.topbar')
    const pathname = usePathname()
    const router = useRouter()
    const [sidebarOpen, setSidebarOpen] = React.useState(false)
    const [loggingOut, setLoggingOut] = React.useState(false)
    const toggleBtnRef = React.useRef<HTMLButtonElement | null>(null)
    const sidebarRef = React.useRef<HTMLElement | null>(null)
    const activeItem = React.useMemo(() => navItems.find((i) => i.match(pathname)), [pathname])
    const crumb = activeItem ? tNav(activeItem.labelKey) : tNav('dashboard')

    React.useEffect(() => {
        function onKeyDown(e: KeyboardEvent) {
            if (e.key === 'Escape') {
                setSidebarOpen(false)
                // restore focus to toggle
                toggleBtnRef.current?.focus()
            }
        }
        function onResize() {
            try {
                if (window.innerWidth >= 1024) {
                    setSidebarOpen(false)
                    document.body.style.overflow = ''
                }
            } catch {}
        }
        if (sidebarOpen) {
            document.addEventListener('keydown', onKeyDown)
            window.addEventListener('resize', onResize)
            try { document.body.style.overflow = 'hidden' } catch {}
        } else {
            try { document.body.style.overflow = '' } catch {}
        }
        return () => {
            document.removeEventListener('keydown', onKeyDown)
            window.removeEventListener('resize', onResize)
            try { document.body.style.overflow = '' } catch {}
        }
    }, [sidebarOpen])

    React.useEffect(() => {
        if (!sidebarOpen) return
        const root = sidebarRef.current
        if (!root) return
        const sel = 'a[href],button:not([disabled]),input:not([disabled]),select:not([disabled]),textarea:not([disabled]),[tabindex]:not([tabindex="-1"])'
        const getItems = () => Array.from(root.querySelectorAll<HTMLElement>(sel))

        const items = getItems()
        const toFocus = items[0] || (root as unknown as HTMLElement)
        try { toFocus.focus() } catch {}

        function onKeyDown(e: KeyboardEvent) {
            if (e.key !== 'Tab') return
            const list = getItems()
            if (list.length === 0) return
            const first = list[0]
            const last = list[list.length - 1]
            const active = document.activeElement as HTMLElement | null
            if (e.shiftKey) {
                if (active === first || !(active && root.contains(active))) {
                    e.preventDefault()
                    last.focus()
                }
            } else {
                if (active === last || !(active && root.contains(active))) {
                    e.preventDefault()
                    first.focus()
                }
            }
        }

        document.addEventListener('keydown', onKeyDown)
        return () => document.removeEventListener('keydown', onKeyDown)
    }, [sidebarOpen])

    function closeSidebar() {
        setSidebarOpen(false)
        toggleBtnRef.current?.focus()
    }

    async function logout() {
        try {
            setLoggingOut(true)
            await fetch('/api/auth/logout', {method: 'POST'})
            router.replace('/login/')
        } finally {
            setLoggingOut(false)
        }
    }


    return (
        <div className="min-h-screen bg-slate-50 flex overflow-x-hidden">
            {/* Mobile backdrop */}
            <div
                className={cx(
                    'fixed inset-0 z-20 bg-black/40 lg:hidden transition-opacity motion-reduce:transition-none',
                    sidebarOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'
                )}
                onClick={closeSidebar}
                aria-hidden={!sidebarOpen}
            />

            {/* Sidebar */}
            <aside
                ref={sidebarRef}
                className={cx(
                    'w-64 bg-white border-e shadow-sm lg:relative lg:inset-auto fixed z-30 inset-y-0 start-0 transition-transform motion-reduce:transition-none lg:translate-x-0',
                    sidebarOpen ? 'translate-x-0' : 'ltr:-translate-x-full rtl:translate-x-full lg:translate-x-0',
                )}
                aria-label="Sidebar"
                role="dialog"
                aria-modal={sidebarOpen}
                tabIndex={-1}
            >
                <div className="h-16 flex items-center px-4 border-b font-semibold">{tTopbar('admin')}</div>
                <nav className="p-2">
                    <ul className="space-y-1">
                        {navItems.map((item) => {
                            const active = item.match(pathname)
                            const href = item.href()
                            return (
                                <li key={href}>
                                    <Link
                                        href={href}
                                        aria-current={active ? 'page' : undefined}
                                        className={cx(
                                            'block rounded-md px-3 py-2 text-sm',
                                            active ? 'bg-slate-900 text-white' : 'text-slate-700 hover:bg-slate-100',
                                        )}
                                        onClick={() => setSidebarOpen(false)}
                                    >
                                        {tNav(item.labelKey)}
                                    </Link>
                                </li>
                            )
                        })}
                    </ul>
                </nav>
            </aside>

            {/* Content wrapper */}
            <div className="flex-1 min-h-screen flex flex-col" aria-hidden={sidebarOpen}>
                {/* Topbar */}
                <header className="h-16 bg-white border-b sticky top-0 z-20 flex items-center justify-between px-4">
                    <div className="flex items-center gap-2 min-w-0">
                        <button
                            ref={toggleBtnRef}
                            className="lg:hidden inline-flex items-center justify-center w-9 h-9 rounded-md border hover:bg-slate-50"
                            onClick={() => setSidebarOpen((v) => !v)}
                            aria-label="Toggle navigation"
                            aria-expanded={sidebarOpen}
                        >
                            â˜°
                        </button>
                        <div className="text-sm text-muted-foreground truncate max-w-[50vw] sm:max-w-xs md:max-w-sm lg:max-w-md">
                            <span className="me-1">{tTopbar('admin')}</span>
                            <span className="opacity-60">/</span>
                            <span className="ms-1 font-medium">{crumb}</span>
                        </div>
                    </div>
                    <div className="flex items-center gap-2">
                        <input
                            type="search"
                            placeholder={tTopbar('searchPlaceholder')}
                            className="hidden md:block h-9 border border-input bg-background rounded-md px-3 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring"
                            aria-label={tTopbar('searchPlaceholder')}
                        />
                        <LanguageSwitcher inline/>
                        <button
                            onClick={logout}
                            disabled={loggingOut}
                            className="inline-flex items-center h-10 rounded-md bg-primary text-primary-foreground px-3 text-sm disabled:opacity-50"
                        >
                            {loggingOut ? tTopbar('loggingOut') : tTopbar('logout')}
                        </button>
                    </div>
                </header>

                {/* Main content */}
                <main className="p-4">
                    <div className="mx-auto max-w-7xl">
                        {children}
                    </div>
                </main>
            </div>
        </div>
    )
}
